{"version":3,"sources":["Context/CountriesContext/countries.js","Components/Search/SearchResults/Results.js","Components/Search/Search.js","Components/CountryDisplay/Country.js","App.js","reportWebVitals.js","index.js"],"names":["Countries","createContext","Results","props","countries","useContext","className","map","country","name","message","Math","random","search","htmlFor","id","type","onChange","searched","Country","capital","population","language","EN","src","width","App","useState","setSearch","setCountries","searching","setSearching","useEffect","axios","get","then","result","data","catch","err","findedCountries","filter","c","toLowerCase","includes","length","flag","languages","Provider","value","e","console","log","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAEaA,G,kBAAYC,wBAAc,OCiBxBC,EAhBC,SAACC,GACf,IAAMC,EAAYC,qBAAWL,GAE7B,OACE,oBAAIM,UAAU,KAAd,SACGF,EAAUG,KAAI,SAACC,GACd,OACE,+BACGA,EAAQC,KADX,IACkBD,EAAQE,UADjBF,EAAQC,KAAOE,KAAKC,gBCWxBC,EAlBA,SAACV,GACd,OACE,qBAAKG,UAAU,iBAAf,SACE,gCACG,IACD,uBAAOQ,QAAQ,SAAf,6BACA,uBACER,UAAU,SACVS,GAAG,SACHC,KAAK,OACLC,SAAUd,EAAMU,SAElB,cAAC,EAAD,CAAeK,SAAU,CAAC,CAAET,KAAM,eAAiB,CAAEA,KAAM,iB,iBCQpDU,G,MArBC,SAAChB,GACf,OACE,sBAAKG,UAAU,UAAf,UACE,6BAAKH,EAAMM,OACX,sBAAKH,UAAU,OAAf,UACE,8CAAiBH,EAAMiB,WACvB,iDAAoBjB,EAAMkB,iBAE5B,2CACA,6BACGlB,EAAMmB,SACHnB,EAAMmB,SAASf,KAAI,SAACgB,GAClB,OAAO,+BAAmCA,EAAGd,KAAtC,MAASc,EAAGd,KAAOE,KAAKC,aAEjC,OAEN,qBAAKY,IAAKrB,EAAMqB,IAAKC,MAAM,eCgDlBC,MA1Df,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNd,EADM,KACEe,EADF,OAEqBD,mBAAS,IAF9B,mBAENvB,EAFM,KAEKyB,EAFL,OAGqBF,mBAAS,IAH9B,mBAGNG,EAHM,KAGKC,EAHL,KAIbC,qBAAU,WACRC,IACGC,IAAI,wCACJC,MAAK,SAACC,GACLP,EAAaO,EAAOC,SAErBC,OAAM,SAACC,SACT,IAEHP,qBAAU,WACR,IAAMQ,EAAkBpC,EAAUqC,QAAO,SAACC,GACxC,OAAOA,EAAEjC,KAAKkC,cAAcC,SAAS/B,EAAO8B,kBAEzC9B,EAGC2B,EAAgBK,OAAS,GAC3Bd,EAAa,CAAC,CAAErB,QAAS,8CAEzBqB,EAAaS,GALfT,EAAa,MAQd,CAAClB,IAEJ,IAIML,EACJsB,EAAUe,OAAS,EACff,EAAUvB,KAAI,SAACC,GACb,OACE,cAAC,EAAD,CAEEC,KAAMD,EAAQC,KACde,IAAKhB,EAAQsC,KACb1B,QAASZ,EAAQY,QACjBC,WAAYb,EAAQa,WACpBC,SAAUd,EAAQuC,WALbvC,EAAQa,WAAaV,KAAKC,aASrC,KACN,OACE,sBAAKN,UAAU,MAAf,UACE,2CAAcO,KACd,cAACb,EAAUgD,SAAX,CAAoBC,MAAOnB,EAA3B,SACE,cAAC,EAAD,CAAQjB,OAvBW,SAACqC,GACxBC,QAAQC,IAAItB,GACZF,EAAUsB,EAAEG,OAAOJ,YAuBhBzC,MCjDQ8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.be99a908.chunk.js","sourcesContent":["import React, { createContext } from \"react\";\r\n\r\nexport const Countries = createContext(null);\r\n","import \"./Results.css\";\r\nimport { useContext } from \"react\";\r\nimport { Countries } from \"../../../Context/CountriesContext/countries\";\r\nconst Results = (props) => {\r\n  const countries = useContext(Countries);\r\n\r\n  return (\r\n    <ul className=\"ul\">\r\n      {countries.map((country) => {\r\n        return (\r\n          <li key={country.name + Math.random()}>\r\n            {country.name} {country.message}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import \"./Search.css\";\r\nimport SearchResults from \"./SearchResults/Results\";\r\n\r\nconst search = (props) => {\r\n  return (\r\n    <div className=\"Search_Parrent\">\r\n      <div>\r\n        {\" \"}\r\n        <label htmlFor=\"Search\">find Countries </label>\r\n        <input\r\n          className=\"Search\"\r\n          id=\"Search\"\r\n          type=\"text\"\r\n          onChange={props.search}\r\n        />\r\n        <SearchResults searched={[{ name: \"Georsddsgia\" }, { name: \"nksd\" }]} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default search;\r\n","import \"./Country.css\";\r\n\r\nconst Country = (props) => {\r\n  return (\r\n    <div className=\"Country\">\r\n      <h2>{props.name}</h2>\r\n      <div className=\"info\">\r\n        <label>Capital: {props.capital}</label>\r\n        <label>Population: {props.population}</label>\r\n      </div>\r\n      <h3>languages</h3>\r\n      <ul>\r\n        {props.language\r\n          ? props.language.map((EN) => {\r\n              return <li key={EN.name + Math.random()}>{EN.name} </li>;\r\n            })\r\n          : null}\r\n      </ul>\r\n      <img src={props.src} width=\"200px\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Country;\r\n","import \"./App.css\";\n\nimport Search from \"./Components/Search/Search\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Countries } from \"./Context/CountriesContext/countries\";\nimport Country from \"./Components/CountryDisplay/Country\";\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n  const [countries, setCountries] = useState([]);\n  const [searching, setSearching] = useState([]);\n  useEffect(() => {\n    axios\n      .get(\"https://restcountries.eu/rest/v2/all\")\n      .then((result) => {\n        setCountries(result.data);\n      })\n      .catch((err) => {});\n  }, []);\n\n  useEffect(() => {\n    const findedCountries = countries.filter((c) => {\n      return c.name.toLowerCase().includes(search.toLowerCase());\n    });\n    if (!search) {\n      setSearching([]);\n    } else {\n      if (findedCountries.length > 10) {\n        setSearching([{ message: \"Too many matches, specify another filter\" }]);\n      } else {\n        setSearching(findedCountries);\n      }\n    }\n  }, [search]);\n\n  const searchingHandler = (e) => {\n    console.log(searching);\n    setSearch(e.target.value);\n  };\n  const country =\n    searching.length < 2\n      ? searching.map((country) => {\n          return (\n            <Country\n              key={country.population + Math.random()}\n              name={country.name}\n              src={country.flag}\n              capital={country.capital}\n              population={country.population}\n              language={country.languages}\n            />\n          );\n        })\n      : null;\n  return (\n    <div className=\"App\">\n      <div>search: {search}</div>\n      <Countries.Provider value={searching}>\n        <Search search={searchingHandler} />\n      </Countries.Provider>\n      {country}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}